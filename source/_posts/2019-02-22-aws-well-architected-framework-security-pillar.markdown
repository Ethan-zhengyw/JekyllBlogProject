---
layout: post
title:  "AWS架构完善五大支柱之安全性支柱"
date:   2019-02-22 22:43:00 +0800
tags: [云计算, 架构设计, AWS, 架构完善框架, 学习笔记, 安全]
categories: 架构设计
---
![本文结构](/assets/images/aws-well-architected-framework-security-pillar.png)

## 1. 前言
### 1.1 安全性定义
安全性支柱是AWS架构完善框架的五大支柱之一，围绕如何通风险评估及安全策略保护信息、系统以及资产，交付商业价值。 它包含以下五个方面的内容：身份与访问管理、检测控制、基础设施保护、数据保护、事件响应。

下面的内容是我阅读AWS架构完善[安全性支柱白皮书](https://d1.awsstatic-china.com/whitepapers/architecture/AWS-Security-Pillar.pdf)时整理的笔记和心得。

### 1.2 安全性设计原则
* **最小权限原则**
在与AWS的资源进行交互时，只授予必要的最小的、有有效期限的权限
* **可追溯性**
记录必要的信息，确保关心的操作或系统状态变化能够被监控、报警和审计
* **在一切层面考虑安全性**
除了考虑系统边界的安全性以外，还需要系统内部不同层面加以考虑，如：虚拟机、操作系统、软件、网络、负载均衡
* **自动化安全性最佳实践**
使用基于软件的安全机制有助于更快、更高效地扩展应用，具体应用方式？
* **保护传输中的、静态的数据**
对数据按敏感程度分级，使用合适的方式进行保护，包括：加密、Tokenization、访问权限控制
* **避免人们直接操作数据**
创建机制或工具，避免人面直接操作数据，避免失误导致损失
* **提前为安全事件做好准备**
创建安全事件处理流程，并进行演练检验其有效性；使用自动化工具提高问题发现、处理的效率。

## 2. 身份与访问管理
身份与访问管理确保只有经过认证和授权的用户能够以指定的方式访问资源，是系统安全性的关键内容。需要关心如何保护AWS凭证和进行细粒度的授权。

### 2.1 保护凭证
* root账号的使用：使用多因子认证进行保护，完成相关配置后删除访问密钥；不直接使用，只用于创建低权限的子账号进行业务管理
* 联合认证：通过 SAML 2.0 或者 Web 身份机制？减少创建新用户的需求，有效利用已有机制
* 人机交互密码保护：满足一定的复杂性要求、定期修改、使用多因子认证
* 机机交互凭证保护：使用访问密钥ID和机密密钥（AWS STS，AK/SK）进行访问；避免凭证泄漏，凭证需要加密存储，避免在日志中打印，避免明文硬编码在源代码中，避免不小心入库

相关的AWS服务：AWS STS，AWS EC2 metadata

### 2.2 细粒度授权
认证和授权的核心在于：定义主角：如用户、组、角色、服务，创建并指定策略，严格按策略进行访问控制。
对访问进行细粒度的授权有以下好处：
* 减少凭证泄漏后带来的影响
* 简化审计复杂度
* 极具鲁棒性的访问管理框架

相关的AWS服务：IAM、AWS Organizations（中心化地管理不同AWS账号的资源访问策略）

## 3. 检测控制

### 3.1 日志收集与分析
即把必要的信息以日志的、事件形势记录下来，统一收集分析，日志采集或事件记录可以通过API调用的方式发送到相关日志、审计服务。

相关的AWS服务：Amazon GuardDuty 、AWS Config、AWS CloudWatch Logs、AWS S3、AWS Glacier、AWS Athena

### 3.2 将审计控制与通知和工作流进行整合
即事件、问题管理流程中，类型为安全性的部分，参考运维管理领域的事件问题管理流程即可；另外值得一提的是，还可以在CICD的过程中考虑安全性，例如：构建时检测是否存在未解决的安全类issue、bug。

相关的AWS服务：AWS Config Rules、Amazon Inspector（ 用于检测构建过程发现的安全性问题）、AWS CloudWatch Logs/API/SDK

## 4. 基础设施保护

### 4.1 保护网络和主机级边界
可以从以下几个方面进行考虑：设计系统的网络拓扑，合理规划网络区域、合理选择网络安全区部署组件、考虑系统流量走向，合理配置防火墙、VPC、子网、安全组，NACLs，只允许必要的访问流量

相关的AWS服务：Amazon VPC Security Groups 、 AWS Shield （antiDDos）、AWS WAF（网络应用防火墙）、AWS Firewall Manager（中心化管理不同AWS账号的WAF规则）、AWS Direct Connect（连接自己的数据中心到AWS VPC）

### 4.2 系统安全配置和维护
监控并确保系统的配置处于期望的安全状态。确保及时对主机系统进行应用最新的补丁进行安全加固（可以使用EC2 Systems Manager的维护窗口、补丁管理进行加固）、或使用一次性的计算资源，需要时直接使用CloudFormation应用最新的OS模板创建计算资源实例，确保系统是最新的。

相关的AWS服务：AWS Inspector、AWS CloudFormation

### 4.3 实施服务级的保护
设置更细粒度的权限访问配置，指定指定的凭证/服务具有对指定服务资源的访问权限。

相关的AWS服务：AWS KMS、AWS S3（支持对桶进行细粒度权限配置）、AWS SNS（支持对=主题进行细粒度权限配置）

## 5. 数据保护

### 5.1 数据分级
根据数据的敏感程度对组织的数据进行分类。考虑以下要素：数据类型、数据存储的位置、访问级别、保护方式（加密/访问控制）。实施数据保护时，平衡安全性与可用性，采用纵深防御策略（多层防御，通过强认证、确保访问来自受信任区域）。并且避免手动操作数据。

### 5.2 加密/令牌（Encryption/Tokenization）
* **加密** 
即加密
* **令牌**
令牌用于表达信息中的某一段敏感片段，例如：通过令牌表达客户的信用卡号，令牌内容必须毫无意义。

考虑要点
* 自己定义的数据分类模型，以及每一层级的访问权限
* 要求实现的安全合规要求，严格遵守
* 根据场景选择令牌或加密进行数据保护
* 考虑解密密钥的访问权限

### 5.3 保护静态数据

通过加密或访问控制的方式保护静态数据，包括：块存储、对象存储、数据库、归档文件等

### 5.4 保护传输中的数据
系统内、系统——用户侧两种路线传输的数据都需要考虑，使用安全的实现了TLS的通信协议，比如https加密通信，以保护数据可靠性与完整性。

关键的AWS服务：ACM（管理https证书）

### 5.5 数据备份/复制/恢复
Amazon S3（可用性达“11个9”），Amazon RDS、Amazon EBS、Amazon Glacier均提供了相应的数据备份恢复机制。

相关的AWS服务：AWS KMS、AWS S3、AWS EBS、AWS Glacier

## 6. 事件响应
* 快速隔离环境，如：通过修改虚拟机安全组进行隔离
* 使处理进程可见非常重要
* 进行RCA
* 临时决定赋予某个人权限可能引入其他问题，需要提前准备好
* 取底——卷打快照，留待恢复分析
* 使用CloudFormation创建**清洁室**进行分析

相关的AWS服务：IAM、AWS CloudFormation、AWS CloudTrail、AWS CloudWatch Event、AWS Step Function

## 7. 总结
安全是一项长期的工作，每一次安全性问题的出现，都应该被看作是对系统架构的安全性进行完善的机会。考虑系统架构设计的安全性时，从以下几点着手：使用强的身份认证和访问控制、自动化安全事件响应、在不同层级对基础设施进行防护、对静态/传输中的数据进行分级/加密保护。

## 8. 心得感想
问：回想在实际工作中我们是如何保障产品的安全性的呢？

答曰：测试。

#### 安全测试
在开发团队进行功能开发时，部分成员由于缺乏相应的知识与经验，无法全面系统地考虑到在哪些层面应该做好必要的防护，不可避免地会引入数目相当可观的安全性问题，因此在产品转测后，需要专业的安全测试团队介入，启动系统全面的安全测试。在那不太美好的回忆里，安全性问题大致可以划分为以下几大类：
* 文件、目录权限过大（比如密钥、证书、秘文权限应该是600）
* 敏感信息未加密存储、日志中打印敏感信息（明文密码、公网IP等）
* 操作系统、引用的软件存在高危漏洞
* 使用开源三方软件隐含的法务风险（使用fossid识别源码归属）
* 使用不安全的加密算法
* ddos攻击下系统可用性不足
* 存在横向纵向越权问题
* 使用权限过大的账号（如root）运行业务程序

#### 安全问题整改
随着安全测试的进行，开发同学门陆陆续续接收到五花八门的问题单，一会儿笑话自己写出如此低级而严重的安全Bug，一会儿吐槽变态的安全红线要求，在修改问题单时，逐渐加深对系统安全性设计实现的认识，得以成长。

#### 对照设计原则与要点

| AWS架构完善安全性支柱设计原则/要点 | 工作实践 |
| --- | --- |
| 最小权限原则 | 系统文件、目录权限有保证，但账号、服务未考量 |
| 可追溯性 | 对接公有云的审计服务，在API调用时将审计日志发送到审计服务 |
| 在一切层面考虑安全性 | done |
| 自动化安全性最佳实践 | not yet |
| 保护传输中的、静态的数据 | done |
| 避免人们直接操作数据 | 使用代码自动化数据库升级，使用权限受限的运维页面操作数据库 |
| 提前为安全事件做好准备 | not yet |

## 9. 参考链接
* https://d1.awsstatic-china.com/whitepapers/architecture/AWS-Security-Pillar.pdf
* https://amazonaws-china.com/cn/architecture/well-architected/
* https://amazonaws-china.com/cn/blogs/apn/the-5-pillars-of-the-aws-well-architected-framework/
* [Tokenization vs Encryption](https://www.skyhighnetworks.com/cloud-security-university/tokenization-vs-encryption/)
