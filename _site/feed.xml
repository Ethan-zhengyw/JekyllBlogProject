<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://172.17.0.2:8000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://172.17.0.2:8000/" rel="alternate" type="text/html" /><updated>2019-02-26T11:43:49+00:00</updated><id>http://172.17.0.2:8000/feed.xml</id><title type="html">Ethan’s Blog</title><subtitle></subtitle><entry><title type="html">AWS架构完善五大支柱之安全性支柱</title><link href="http://172.17.0.2:8000/blog/jekyll/architects/framework/2019/02/22/aws-well-architected-framework-security-pillar.html" rel="alternate" type="text/html" title="AWS架构完善五大支柱之安全性支柱" /><published>2019-02-22T14:43:00+00:00</published><updated>2019-02-22T14:43:00+00:00</updated><id>http://172.17.0.2:8000/blog/jekyll/architects/framework/2019/02/22/aws-well-architected-framework-security-pillar</id><content type="html" xml:base="http://172.17.0.2:8000/blog/jekyll/architects/framework/2019/02/22/aws-well-architected-framework-security-pillar.html">&lt;p&gt;关键词：AWS, Architects, Well-Architected Framework, Security&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/aws-well-architected-framework-security-pillar.png&quot; alt=&quot;本文结构&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-前言&quot;&gt;1. 前言&lt;/h2&gt;
&lt;h3 id=&quot;11-安全性定义&quot;&gt;1.1 安全性定义&lt;/h3&gt;
&lt;p&gt;安全性支柱是AWS架构完善框架的五大支柱之一，围绕如何通风险评估及安全策略保护信息、系统以及资产，交付商业价值。 它包含以下五个方面的内容：身份与访问管理、检测控制、基础设施保护、数据保护、事件响应。&lt;/p&gt;

&lt;p&gt;下面的内容是我阅读AWS架构完善&lt;a href=&quot;https://d1.awsstatic-china.com/whitepapers/architecture/AWS-Security-Pillar.pdf&quot;&gt;安全性支柱白皮书&lt;/a&gt;时整理的笔记和心得。&lt;/p&gt;

&lt;h3 id=&quot;12-安全性设计原则&quot;&gt;1.2 安全性设计原则&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;最小权限原则&lt;/strong&gt;
在与AWS的资源进行交互时，只授予必要的最小的、有有效期限的权限&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;可追溯性&lt;/strong&gt;
记录必要的信息，确保关心的操作或系统状态变化能够被监控、报警和审计&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;在一切层面考虑安全性&lt;/strong&gt;
除了考虑系统边界的安全性以外，还需要系统内部不同层面加以考虑，如：虚拟机、操作系统、软件、网络、负载均衡&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;自动化安全性最佳实践&lt;/strong&gt;
使用基于软件的安全机制有助于更快、更高效地扩展应用，具体应用方式？&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;保护传输中的、静态的数据&lt;/strong&gt;
对数据按敏感程度分级，使用合适的方式进行保护，包括：加密、Tokenization、访问权限控制&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;避免人们直接操作数据&lt;/strong&gt;
创建机制或工具，避免人面直接操作数据，避免失误导致损失&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;提前为安全事件做好准备&lt;/strong&gt;
创建安全事件处理流程，并进行演练检验其有效性；使用自动化工具提高问题发现、处理的效率。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-身份与访问管理&quot;&gt;2. 身份与访问管理&lt;/h2&gt;
&lt;p&gt;身份与访问管理确保只有经过认证和授权的用户能够以指定的方式访问资源，是系统安全性的关键内容。需要关心如何保护AWS凭证和进行细粒度的授权。&lt;/p&gt;

&lt;h3 id=&quot;21-保护凭证&quot;&gt;2.1 保护凭证&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;root账号的使用：使用多因子认证进行保护，完成相关配置后删除访问密钥；不直接使用，只用于创建低权限的子账号进行业务管理&lt;/li&gt;
  &lt;li&gt;联合认证：通过 SAML 2.0 或者 Web 身份机制？减少创建新用户的需求，有效利用已有机制&lt;/li&gt;
  &lt;li&gt;人机交互密码保护：满足一定的复杂性要求、定期修改、使用多因子认证&lt;/li&gt;
  &lt;li&gt;机机交互凭证保护：使用访问密钥ID和机密密钥（AWS STS，AK/SK）进行访问；避免凭证泄漏，凭证需要加密存储，避免在日志中打印，避免明文硬编码在源代码中，避免不小心入库&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;相关的AWS服务：AWS STS，AWS EC2 metadata&lt;/p&gt;

&lt;h3 id=&quot;22-细粒度授权&quot;&gt;2.2 细粒度授权&lt;/h3&gt;
&lt;p&gt;认证和授权的核心在于：定义主角：如用户、组、角色、服务，创建并指定策略，严格按策略进行访问控制。
对访问进行细粒度的授权有以下好处：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;减少凭证泄漏后带来的影响&lt;/li&gt;
  &lt;li&gt;简化审计复杂度&lt;/li&gt;
  &lt;li&gt;极具鲁棒性的访问管理框架&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;相关的AWS服务：IAM、AWS Organizations（中心化地管理不同AWS账号的资源访问策略）&lt;/p&gt;

&lt;h2 id=&quot;3-检测控制&quot;&gt;3. 检测控制&lt;/h2&gt;

&lt;h3 id=&quot;31-日志收集与分析&quot;&gt;3.1 日志收集与分析&lt;/h3&gt;
&lt;p&gt;即把必要的信息以日志的、事件形势记录下来，统一收集分析，日志采集或事件记录可以通过API调用的方式发送到相关日志、审计服务。&lt;/p&gt;

&lt;p&gt;相关的AWS服务：Amazon GuardDuty 、AWS Config、AWS CloudWatch Logs、AWS S3、AWS Glacier、AWS Athena&lt;/p&gt;

&lt;h3 id=&quot;32-将审计控制与通知和工作流进行整合&quot;&gt;3.2 将审计控制与通知和工作流进行整合&lt;/h3&gt;
&lt;p&gt;即事件、问题管理流程中，类型为安全性的部分，参考运维管理领域的事件问题管理流程即可；另外值得一提的是，还可以在CICD的过程中考虑安全性，例如：构建时检测是否存在未解决的安全类issue、bug。&lt;/p&gt;

&lt;p&gt;相关的AWS服务：AWS Config Rules、Amazon Inspector（ 用于检测构建过程发现的安全性问题）、AWS CloudWatch Logs/API/SDK&lt;/p&gt;

&lt;h2 id=&quot;4-基础设施保护&quot;&gt;4. 基础设施保护&lt;/h2&gt;

&lt;h3 id=&quot;41-保护网络和主机级边界&quot;&gt;4.1 保护网络和主机级边界&lt;/h3&gt;
&lt;p&gt;可以从以下几个方面进行考虑：设计系统的网络拓扑，合理规划网络区域、合理选择网络安全区部署组件、考虑系统流量走向，合理配置防火墙、VPC、子网、安全组，NACLs，只允许必要的访问流量&lt;/p&gt;

&lt;p&gt;相关的AWS服务：Amazon VPC Security Groups 、 AWS Shield （antiDDos）、AWS WAF（网络应用防火墙）、AWS Firewall Manager（中心化管理不同AWS账号的WAF规则）、AWS Direct Connect（连接自己的数据中心到AWS VPC）&lt;/p&gt;

&lt;h3 id=&quot;42-系统安全配置和维护&quot;&gt;4.2 系统安全配置和维护&lt;/h3&gt;
&lt;p&gt;监控并确保系统的配置处于期望的安全状态。确保及时对主机系统进行应用最新的补丁进行安全加固（可以使用EC2 Systems Manager的维护窗口、补丁管理进行加固）、或使用一次性的计算资源，需要时直接使用CloudFormation应用最新的OS模板创建计算资源实例，确保系统是最新的。&lt;/p&gt;

&lt;p&gt;相关的AWS服务：AWS Inspector、AWS CloudFormation&lt;/p&gt;

&lt;h3 id=&quot;43-实施服务级的保护&quot;&gt;4.3 实施服务级的保护&lt;/h3&gt;
&lt;p&gt;设置更细粒度的权限访问配置，指定指定的凭证/服务具有对指定服务资源的访问权限。&lt;/p&gt;

&lt;p&gt;相关的AWS服务：AWS KMS、AWS S3（支持对桶进行细粒度权限配置）、AWS SNS（支持对=主题进行细粒度权限配置）&lt;/p&gt;

&lt;h2 id=&quot;5-数据保护&quot;&gt;5. 数据保护&lt;/h2&gt;

&lt;h3 id=&quot;51-数据分级&quot;&gt;5.1 数据分级&lt;/h3&gt;
&lt;p&gt;根据数据的敏感程度对组织的数据进行分类。考虑以下要素：数据类型、数据存储的位置、访问级别、保护方式（加密/访问控制）。实施数据保护时，平衡安全性与可用性，采用纵深防御策略（多层防御，通过强认证、确保访问来自受信任区域）。并且避免手动操作数据。&lt;/p&gt;

&lt;h3 id=&quot;52-加密令牌encryptiontokenization&quot;&gt;5.2 加密/令牌（Encryption/Tokenization）&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;加密&lt;/strong&gt; 
即加密&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;令牌&lt;/strong&gt;
令牌用于表达信息中的某一段敏感片段，例如：通过令牌表达客户的信用卡号，令牌内容必须毫无意义。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;考虑要点&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;自己定义的数据分类模型，以及每一层级的访问权限&lt;/li&gt;
  &lt;li&gt;要求实现的安全合规要求，严格遵守&lt;/li&gt;
  &lt;li&gt;根据场景选择令牌或加密进行数据保护&lt;/li&gt;
  &lt;li&gt;考虑解密密钥的访问权限&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;53-保护静态数据&quot;&gt;5.3 保护静态数据&lt;/h3&gt;

&lt;p&gt;通过加密或访问控制的方式保护静态数据，包括：块存储、对象存储、数据库、归档文件等&lt;/p&gt;

&lt;h3 id=&quot;54-保护传输中的数据&quot;&gt;5.4 保护传输中的数据&lt;/h3&gt;
&lt;p&gt;系统内、系统——用户侧两种路线传输的数据都需要考虑，使用安全的实现了TLS的通信协议，比如https加密通信，以保护数据可靠性与完整性。&lt;/p&gt;

&lt;p&gt;关键的AWS服务：ACM（管理https证书）&lt;/p&gt;

&lt;h3 id=&quot;55-数据备份复制恢复&quot;&gt;5.5 数据备份/复制/恢复&lt;/h3&gt;
&lt;p&gt;Amazon S3（可用性达“11个9”），Amazon RDS、Amazon EBS、Amazon Glacier均提供了相应的数据备份恢复机制。&lt;/p&gt;

&lt;p&gt;相关的AWS服务：AWS KMS、AWS S3、AWS EBS、AWS Glacier&lt;/p&gt;

&lt;h2 id=&quot;6-事件响应&quot;&gt;6. 事件响应&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;快速隔离环境，如：通过修改虚拟机安全组进行隔离&lt;/li&gt;
  &lt;li&gt;使处理进程可见非常重要&lt;/li&gt;
  &lt;li&gt;进行RCA&lt;/li&gt;
  &lt;li&gt;临时决定赋予某个人权限可能引入其他问题，需要提前准备好&lt;/li&gt;
  &lt;li&gt;取底——卷打快照，留待恢复分析&lt;/li&gt;
  &lt;li&gt;使用CloudFormation创建&lt;strong&gt;清洁室&lt;/strong&gt;进行分析&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;相关的AWS服务：IAM、AWS CloudFormation、AWS CloudTrail、AWS CloudWatch Event、AWS Step Function&lt;/p&gt;

&lt;h2 id=&quot;7-总结&quot;&gt;7. 总结&lt;/h2&gt;
&lt;p&gt;安全是一项长期的工作，每一次安全性问题的出现，都应该被看作是对系统架构的安全性进行完善的机会。考虑系统架构设计的安全性时，从以下几点着手：使用强的身份认证和访问控制、自动化安全事件响应、在不同层级对基础设施进行防护、对静态/传输中的数据进行分级/加密保护。&lt;/p&gt;

&lt;h2 id=&quot;8-心得感想&quot;&gt;8. 心得感想&lt;/h2&gt;
&lt;p&gt;问：回想在实际工作中我们是如何保障产品的安全性的呢？&lt;/p&gt;

&lt;p&gt;答曰：测试。&lt;/p&gt;

&lt;h4 id=&quot;安全测试&quot;&gt;安全测试&lt;/h4&gt;
&lt;p&gt;在开发团队进行功能开发时，部分成员由于缺乏相应的知识与经验，无法全面系统地考虑到在哪些层面应该做好必要的防护，不可避免地会引入数目相当可观的安全性问题，因此在产品转测后，需要专业的安全测试团队介入，启动系统全面的安全测试。在那不太美好的回忆里，安全性问题大致可以划分为以下几大类：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;文件、目录权限过大（比如密钥、证书、秘文权限应该是600）&lt;/li&gt;
  &lt;li&gt;敏感信息未加密存储、日志中打印敏感信息（明文密码、公网IP等）&lt;/li&gt;
  &lt;li&gt;操作系统、引用的软件存在高危漏洞&lt;/li&gt;
  &lt;li&gt;使用开源三方软件隐含的法务风险（使用fossid识别源码归属）&lt;/li&gt;
  &lt;li&gt;使用不安全的加密算法&lt;/li&gt;
  &lt;li&gt;ddos攻击下系统可用性不足&lt;/li&gt;
  &lt;li&gt;存在横向纵向越权问题&lt;/li&gt;
  &lt;li&gt;使用权限过大的账号（如root）运行业务程序&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;安全问题整改&quot;&gt;安全问题整改&lt;/h4&gt;
&lt;p&gt;随着安全测试的进行，开发同学门陆陆续续接收到五花八门的问题单，一会儿笑话自己写出如此低级而严重的安全Bug，一会儿吐槽变态的安全红线要求，在修改问题单时，逐渐加深对系统安全性设计实现的认识，得以成长。&lt;/p&gt;

&lt;h4 id=&quot;对照设计原则与要点&quot;&gt;对照设计原则与要点&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;AWS架构完善安全性支柱设计原则/要点&lt;/th&gt;
      &lt;th&gt;工作实践&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;最小权限原则&lt;/td&gt;
      &lt;td&gt;系统文件、目录权限有保证，但账号、服务未考量&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;可追溯性&lt;/td&gt;
      &lt;td&gt;对接公有云的审计服务，在API调用时将审计日志发送到审计服务&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;在一切层面考虑安全性&lt;/td&gt;
      &lt;td&gt;done&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;自动化安全性最佳实践&lt;/td&gt;
      &lt;td&gt;not yet&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;保护传输中的、静态的数据&lt;/td&gt;
      &lt;td&gt;done&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;避免人们直接操作数据&lt;/td&gt;
      &lt;td&gt;使用代码自动化数据库升级，使用权限受限的运维页面操作数据库&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;提前为安全事件做好准备&lt;/td&gt;
      &lt;td&gt;not yet&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;9-参考链接&quot;&gt;9. 参考链接&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://d1.awsstatic-china.com/whitepapers/architecture/AWS-Security-Pillar.pdf&lt;/li&gt;
  &lt;li&gt;https://amazonaws-china.com/cn/architecture/well-architected/&lt;/li&gt;
  &lt;li&gt;https://amazonaws-china.com/cn/blogs/apn/the-5-pillars-of-the-aws-well-architected-framework/&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.skyhighnetworks.com/cloud-security-university/tokenization-vs-encryption/&quot;&gt;Tokenization vs Encryption&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">关键词：AWS, Architects, Well-Architected Framework, Security</summary></entry><entry><title type="html">AWS架构完善五大支柱之卓越操作支柱</title><link href="http://172.17.0.2:8000/blog/jekyll/architects/framework/2019/02/13/aws-well-architected-framework-operational-excellence-pillar.html" rel="alternate" type="text/html" title="AWS架构完善五大支柱之卓越操作支柱" /><published>2019-02-13T11:57:00+00:00</published><updated>2019-02-13T11:57:00+00:00</updated><id>http://172.17.0.2:8000/blog/jekyll/architects/framework/2019/02/13/aws-well-architected-framework-operational-excellence-pillar</id><content type="html" xml:base="http://172.17.0.2:8000/blog/jekyll/architects/framework/2019/02/13/aws-well-architected-framework-operational-excellence-pillar.html">&lt;p&gt;关键词：AWS, Architects, Well-Architected Framework, Operational Execellence&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/aws-well-architected-framework-operational-excellence-pillar.svg&quot; alt=&quot;本文结构&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;h3 id=&quot;卓越操作定义&quot;&gt;卓越操作定义&lt;/h3&gt;
&lt;p&gt;卓越操作支柱是&lt;a href=&quot;https://www.jianshu.com/p/c6675eff8b52&quot;&gt;AWS架构完善框架的五大支柱&lt;/a&gt;之一，侧重于运行和监测系统以提供业务价值，并不断改进流程和程序。关键主题包括：管理和自动化变更、响应事件以及定义标准以成功管理日常操作。&lt;/p&gt;

&lt;p&gt;这份&lt;a href=&quot;https://d1.awsstatic-china.com/whitepapers/architecture/AWS-Operational-Excellence-Pillar.pdf&quot;&gt;白皮书&lt;/a&gt;阐述了AWS架构完善框架五大支柱中的卓越操作支柱，它讨论了操作&lt;strong&gt;筹备&lt;/strong&gt;、操作&lt;strong&gt;实施&lt;/strong&gt;、操作&lt;strong&gt;演进&lt;/strong&gt;三个方面的概念、设计原则和最佳实践，指导架构师、软件开发人员在基于AWS平台设计、交付和维护软件时应用这些最佳实践。&lt;/p&gt;

&lt;p&gt;下面的内容是我阅读AWS架构完善卓越操作白皮书时整理的笔记和心得。&lt;/p&gt;

&lt;h3 id=&quot;卓越操作设计原则&quot;&gt;卓越操作设计原则&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;使用代码进行操作&lt;/strong&gt;
应用基础设施即代码、使用代码进行变更、使用代码响应事件，减少人为操作失误导致的失败，快速响应事件。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;为文档做注释&lt;/strong&gt;
手工创建文档时自动生成注释、每次构建时自动生成注释文档，注释文档能够被人或系统使用（作为操作代码的输入），具体应用场景？&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;进行高频、小型、可逆的变更&lt;/strong&gt;
代码尽快入库、入库的代码尽快上线生产环境，尽可能保证一次变更的变更内容单一，从而提高变更成功率、缩短变更时长、缩短变更失败回退所需时长。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;持续改进操作流程&lt;/strong&gt;
在操作过程中注意不足之处，寻找能够改进的地方，确定一个固定的时间对操作流程进行回顾、讨论、完善，确保团队熟悉这个过程。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;预见错误的发生&lt;/strong&gt;
即提前进行故障场景梳理，分析影响，并制定必要的应急响应预案，确定一个固定的时间（“竞赛日活动”）进行运维演练，检验响应预案的有效性以及团队是否具足够的故障响应能力。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;从所有操作失败中学习&lt;/strong&gt;
从所有操作事件和失败中汲取经验来推动改进，将经验在团队内部，以及整个组织范围内进行分享。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;筹备&quot;&gt;筹备&lt;/h2&gt;
&lt;h3 id=&quot;确定优先级&quot;&gt;确定优先级&lt;/h3&gt;
&lt;p&gt;团队内处理问题时有必要对问题优先级进行讨论，建立共识。这样能够大大减少因认识不统一，目标不统一导致的团队内冲突。&lt;/p&gt;

&lt;p&gt;举个例子，实现运维需求时，需要根据业务要求对需求进行排序，如果我们把运维的需求划分为两大类：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;第一类：对系统发布速度有提升的需求&lt;/li&gt;
  &lt;li&gt;第二类：对系统可靠性有提升的需求&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果客户希望能够快速看到运行起来的系统原型，对于可靠性要求暂时不高时，那么可以适当地把第一类运维需求的优先级提高，以快速迭代交付新的演示功能；反之，若是在服务已公测或商用，使用者数目较大时，则需要优先实现第二类运维需求，提高系统可靠性，确保SLA达成。&lt;/p&gt;

&lt;p&gt;再举个例子，当on-call接收到现网事件时，对于用户报障类的问题，应该优先考虑恢复，而后再进行定位问题。如果是开发兼任on-call，而不是训练有素的专业on-call，很可能会习惯性地花费大量时间定位根因。这样客户可能会不满意，客户迫切想要的可能是快速规避问题，恢复业务，减少损失，降低名誉伤害。&lt;/p&gt;

&lt;h3 id=&quot;设计时考虑操作&quot;&gt;设计时考虑操作&lt;/h3&gt;
&lt;p&gt;AWS建议在设计工作负载时，就考虑把部署、变更、监控，告警纳入考虑。这些领域主要包括：基础设施即代码，持续集成与持续部署，监控，告警，分布式追踪等。&lt;/p&gt;

&lt;p&gt;相关的AWS服务：AWS CloudFormation，AWS Developer Tools（AWS CodeCommit、AWS CodeBuild, AWS CodePipeline，AWS CodeDeploy, and AWS CodeStar），AWS CloudWatch，AWS X-Ray…&lt;/p&gt;

&lt;p&gt;有经验丰富的SRE或是擅长CICD工程师在服务孵化的早期就参与进来，对于服务卓越操作目标的达成将非常有帮助。&lt;/p&gt;

&lt;h3 id=&quot;准备度评估&quot;&gt;准备度评估&lt;/h3&gt;
&lt;p&gt;阅读过《Google SRE运维解密》这本书的同学，看到这个小标题时一定联想到到了书中提出的PRR模型吧！PRR（Pilot Readiness Review，试点准备度评估）模型是Google提出的用于评估一个系统的运维能力是否满足上线生产环境的要求的模型。&lt;/p&gt;

&lt;p&gt;回顾一下，这个模型都讲了些什么呢？其实就是一份Checklist，比如：服务的架构设计是否满足规范、基础组件的选型是否使用公司内部基础设施工程部提供的标准的公共组件、可靠性（系统可靠性，数据可靠性，运维可靠性，可靠性管理）是否满足要求、可运维能力（监控，告警，日志采集，调用链能力是否具备）、基于业务场景的故障梳理，进行运维演练，测试故障处理流程，应急响应预案是否有效…&lt;/p&gt;

&lt;p&gt;不在这个模型里的一点应该是对处理事件的人员进行培训，确保他们具备足够的知识和技能。&lt;/p&gt;

&lt;p&gt;相关的AWS服务：AWS Config（配置基线话，如果更改了配置导致系统故障，能够快速回退到上一份正确的配置，快速恢复环境），AWS System Manager&lt;/p&gt;

&lt;h2 id=&quot;操作&quot;&gt;操作&lt;/h2&gt;
&lt;h3 id=&quot;理解操作健康&quot;&gt;理解操作健康&lt;/h3&gt;
&lt;p&gt;一次成功的操作代表新的配置生效了，或者新的特性上线了，并且原有的和新增的拨测用例都还能执行成功。AWS建议通过定义明确的业务和技术指标，并把它们呈现在看板上，以便在操作失败时快速得到反馈，并及时作出响应。&lt;/p&gt;

&lt;p&gt;相关的AWS服务：Cloud Watch Log/Event，Personal Health Dashboard，Service Health Dashboard，AWS Elastic Search。&lt;/p&gt;

&lt;h3 id=&quot;响应事件&quot;&gt;响应事件&lt;/h3&gt;
&lt;p&gt;这部分谈论的是事件管理费流程。事件分类，预料的和未预料的。处理事件需要依据一个不断完善的事件处理流程。这个流程需要保证事件的处理进展和问题影响能够及时地同步到关心事件的相关团队，处理阻塞时要分层上升，以便请求更强的资源帮助问题解决！问题解决要追求根因分析，从源头上解决问题，避免再次出现相同的问题。&lt;/p&gt;

&lt;p&gt;相关的AWS服务：AWS提供了一些服务能够监控某些事件的发生（Cloud Watch），配置规则（Cloud Watch Rules），触发目标服务（Cloud Watch Target）执行预定义的操作（Cloud Watch Event）作为响应，比如：发送短讯通知（SNS），执行Lambda函数（AWS Lambda），执行EC2实例任务，自动伸缩动作（Auto Scaling）&lt;/p&gt;

&lt;p&gt;另外，AWS也对一些第三方的监控，数据处理软件提供了支持，能够把数据通过API发送给第三方应用。&lt;/p&gt;

&lt;h2 id=&quot;演进&quot;&gt;演进&lt;/h2&gt;
&lt;h3 id=&quot;通过经验学习&quot;&gt;通过经验学习&lt;/h3&gt;

&lt;p&gt;定期分析失败用例，并从中学习，避免团队，或者所处的更大的项目组避免重蹈覆辙，这是非常有意义的。&lt;/p&gt;

&lt;p&gt;AWS能够帮助聚合操作活动，工作负载，或者基础设施的日志（CLOUD WATCH），并提供相关的工具帮助分析我们的操作，趋势或者不同系统在不同配置下对操作的响应结果，基于此，我们能够分析计划改进。&lt;/p&gt;

&lt;p&gt;相关的AWS服务：Amazon QuickSight，Amazon Athena，Amazon S3，Amazon CloudWatch&lt;/p&gt;

&lt;h3 id=&quot;分享学习收获&quot;&gt;分享学习收获&lt;/h3&gt;
&lt;p&gt;在团队内、不同团队间、组织内分享文档，标准的基础设施模板，有需要时可对分享的资源设置必要的访问权限。&lt;/p&gt;

&lt;p&gt;相关的AWS服务：AWS Identity and Access Management，Amazon SNS，AWS CodeCommit，AWS Lambda，AWS CloudFormation，Amazon Machine Images（AMI）&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;以上筹备、操作、与演进三部分内容可总结提炼出以下&lt;strong&gt;卓越操作最佳实践&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;运维人员需要理解业务和客户需求才能有效、高效支撑业务&lt;/li&gt;
  &lt;li&gt;运维人员创建操作流程并在实践中检验流程是否有效支持业务需要&lt;/li&gt;
  &lt;li&gt;运维人员需要通过制定、采集指标来衡量目标达成情况&lt;/li&gt;
  &lt;li&gt;业务场景、业务优先级、客户需求会不断发生变化，在变化来临是，需要能够及时调整操作流程以适应改变&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;心得感想&quot;&gt;心得感想&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;从持续改进操作流程到当责文化&lt;/strong&gt;
确保团队熟悉相关的重要流程很重要，但是制定符合实际、具备可操作型的流程更重要，制定安排工作计划时也是。如果流程规范/工作安排不是切实可行的，团队成员默默接受遵循/进行不切实际的流程规范/工作的要求，放弃主动思考流程规范中存在的问题、工作的实际内容合理的工时并提出自己的看法，可以预见的是团队成员将无法遵循规范或按时完成工作，这对团队内当责文化的建立非常不利。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS卓越操作支柱与Google SRE&lt;/strong&gt;
AWS卓越操作支柱中的设计原则和最佳实践与Google提出的SRE指导思想和最佳实践具有相似性：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;AWS架构完善之卓越操作支柱&lt;/th&gt;
      &lt;th&gt;Google SRE&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;运维人员需要理解业务和客户需求才能有效、高效支撑业务&lt;/td&gt;
      &lt;td&gt;制定针对用户的服务质量目标，并且努力去达到这个质量目标&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;运维人员创建操作流程并在实践中检验流程是否有效支持业务需要&lt;/td&gt;
      &lt;td&gt;用超过10年的时间打磨发布流程，并发现好的发布流程具有的一些特征：轻量级、鲁棒性、完整性、可扩展性…&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;运维人员需要通过制定、采集指标来衡量目标达成情况&lt;/td&gt;
      &lt;td&gt;建立全方位的监控与警报系统&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;从所有操作失败中学习&lt;/td&gt;
      &lt;td&gt;事后总结哲学&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;参考链接&quot;&gt;参考链接&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://d1.awsstatic-china.com/whitepapers/architecture/AWS-Operational-Excellence-Pillar.pdf&lt;/li&gt;
  &lt;li&gt;https://amazonaws-china.com/cn/architecture/well-architected/&lt;/li&gt;
  &lt;li&gt;https://amazonaws-china.com/cn/blogs/apn/the-5-pillars-of-the-aws-well-architected-framework/&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">关键词：AWS, Architects, Well-Architected Framework, Operational Execellence</summary></entry><entry><title type="html">AWS良好架构框架的五大支柱</title><link href="http://172.17.0.2:8000/blog/jekyll/architects/framework/2019/02/03/five-pillars-of-aws-well-architected-framework.html" rel="alternate" type="text/html" title="AWS良好架构框架的五大支柱" /><published>2019-02-03T15:05:00+00:00</published><updated>2019-02-03T15:05:00+00:00</updated><id>http://172.17.0.2:8000/blog/jekyll/architects/framework/2019/02/03/five-pillars-of-aws-well-architected-framework</id><content type="html" xml:base="http://172.17.0.2:8000/blog/jekyll/architects/framework/2019/02/03/five-pillars-of-aws-well-architected-framework.html">&lt;p&gt;关键词：AWS, Architects, Well-Architected Framework&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;写一个软件系统和建筑工程很类似，如果基础不牢固，结构性问题会暗中侵蚀建筑物的功能和完整性&lt;/li&gt;
  &lt;li&gt;基于AWS设计技术解决方案时，如果忽视卓越操作、安全性、可靠性、性能效率和成本优化这五大支柱，交付一个能满足你需求期望的系统可能就比较困难&lt;/li&gt;
  &lt;li&gt;如果把这五大支柱纳入架构设计时的考量范围，能够帮助我们构建稳定、高效的软件系统，从而有更多的精力投入其他方面的工作，例如业务功能需求&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;什么是aws-well-architected-framework&quot;&gt;什么是AWS Well-Architected Framework？&lt;/h2&gt;
&lt;p&gt;AWS Well-Architected Framework可帮助云架构师为其应用程序构建安全、高性能、具有弹性和高效的基础设施。基于安全性、可靠性、性能效率、成本优化和卓越操作这五个基础支柱，此框架为客户和合作伙伴提供了一种评估架构的一致方法，并实施能够在使用中扩展的设计。&lt;/p&gt;

&lt;h2 id=&quot;五大支柱概览&quot;&gt;五大支柱概览&lt;/h2&gt;

&lt;h3 id=&quot;卓越操作&quot;&gt;卓越操作&lt;/h3&gt;

&lt;h4 id=&quot;定义&quot;&gt;定义&lt;/h4&gt;
&lt;p&gt;卓越操作支柱侧重于运行和监测系统以提供业务价值，并不断改进流程和程序。关键主题包括：管理和自动化变更、响应事件以及定义标准以成功管理日常操作。&lt;/p&gt;

&lt;h4 id=&quot;白皮书&quot;&gt;白皮书&lt;/h4&gt;
&lt;p&gt;https://d1.awsstatic-china.com/whitepapers/architecture/AWS-Operational-Excellence-Pillar.pdf&lt;/p&gt;

&lt;h4 id=&quot;设计原则&quot;&gt;设计原则&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;使用代码进行操作&lt;/li&gt;
  &lt;li&gt;为文档做注释&lt;/li&gt;
  &lt;li&gt;用高频率、单一变更内容（小）、可回退的变更替代大批量的变更&lt;/li&gt;
  &lt;li&gt;持续改进变更流程&lt;/li&gt;
  &lt;li&gt;预见错误的发生&lt;/li&gt;
  &lt;li&gt;从所有操作错误中学习&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;最佳实践&quot;&gt;最佳实践&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;运维人员需要理解业务和客户需求才能正确支撑业务&lt;/li&gt;
  &lt;li&gt;运维人员创建操作流程并在实践中检验流程是否有效支持业务需要&lt;/li&gt;
  &lt;li&gt;运维人员需要通过采集指标来衡量业务需要是否达到要求，得到满足&lt;/li&gt;
  &lt;li&gt;业务场景、业务优先级、客户需求会不断发生变化，在变化来临是，需要能够及时调整操作流程以适应改变&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;安全性&quot;&gt;安全性&lt;/h3&gt;

&lt;h4 id=&quot;定义-1&quot;&gt;定义&lt;/h4&gt;
&lt;p&gt;安全支柱侧重于保护信息和系统。关键主题包括：数据的机密性和完整性、识别和管理谁可以进行哪些权限管理工作、保护系统以及建立检测安全事件的控制措施。&lt;/p&gt;

&lt;h4 id=&quot;白皮书-1&quot;&gt;白皮书&lt;/h4&gt;
&lt;p&gt;https://d1.awsstatic-china.com/whitepapers/architecture/AWS-Security-Pillar.pdf&lt;/p&gt;

&lt;h4 id=&quot;设计原则-1&quot;&gt;设计原则&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;强身份认证作为基础&lt;/li&gt;
  &lt;li&gt;使系统具备可追溯能力&lt;/li&gt;
  &lt;li&gt;在不同层级上确保安全性&lt;/li&gt;
  &lt;li&gt;自动化安全性最佳实践&lt;/li&gt;
  &lt;li&gt;静止的和传输中的数据都要保护&lt;/li&gt;
  &lt;li&gt;提前为安全事故做好准备&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;最佳实践-1&quot;&gt;最佳实践&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;在设计系统之前，考虑谁可以使用它？怎么识别安全事故？如何保障数据的完整性和可靠性？&lt;/li&gt;
  &lt;li&gt;需要指定详细的并且经过实践验证的安全事故响应流程，这对于减少商业损失和遵循监管意义重大&lt;/li&gt;
  &lt;li&gt;定义AWS责任共担模型，AWS与客户分别承担相应的责任&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;可靠性&quot;&gt;可靠性&lt;/h3&gt;

&lt;h4 id=&quot;定义-2&quot;&gt;定义&lt;/h4&gt;
&lt;p&gt;可靠性支柱侧重于预防故障、快速从故障中恢复根据业务量动态调整资源以满足业务和客户需求的能力。关键主题包括：设置相关的基本要素、跨项目要求、恢复计划以及我们如何处理变更。&lt;/p&gt;

&lt;h4 id=&quot;白皮书-2&quot;&gt;白皮书&lt;/h4&gt;
&lt;p&gt;https://d1.awsstatic-china.com/whitepapers/architecture/AWS-Reliability-Pillar.pdf&lt;/p&gt;

&lt;h4 id=&quot;设计原则-2&quot;&gt;设计原则&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;测试故障恢复流程，演练异常恢复方案&lt;/li&gt;
  &lt;li&gt;自动从异常中恢复&lt;/li&gt;
  &lt;li&gt;通过水平扩展提升服务整体可用性&lt;/li&gt;
  &lt;li&gt;停止猜测系统能力&lt;/li&gt;
  &lt;li&gt;通过自动化管理变更&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;最佳实践-2&quot;&gt;最佳实践&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;可靠性的达成，要求对系统各个方面进行监控、配置相应的告警策略、管控变更、能够从错误中自愈&lt;/li&gt;
  &lt;li&gt;考虑基础底座的可靠性，例如网络带宽&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;性能效率&quot;&gt;性能效率&lt;/h3&gt;

&lt;h4 id=&quot;定义-3&quot;&gt;定义&lt;/h4&gt;
&lt;p&gt;性能效率支柱侧重于高效使用 IT 和计算资源。关键主题包括：根据工作负载要求选择合适的资源类型和大小、监测性能以及做出明智的决策以在业务需求发展或技术革新时维持效率。&lt;/p&gt;

&lt;h4 id=&quot;白皮书-3&quot;&gt;白皮书&lt;/h4&gt;
&lt;p&gt;https://d1.awsstatic-china.com/whitepapers/architecture/AWS-Performance-Efficiency-Pillar.pdf&lt;/p&gt;

&lt;h4 id=&quot;设计原则-3&quot;&gt;设计原则&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;广泛采用先进技术&lt;/li&gt;
  &lt;li&gt;全球范围分钟级可达&lt;/li&gt;
  &lt;li&gt;使用无服务器架构&lt;/li&gt;
  &lt;li&gt;频繁进行实验&lt;/li&gt;
  &lt;li&gt;理解机器？&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;最佳实践-3&quot;&gt;最佳实践&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;数据驱动，收集各个方面的数据，从高层次的设计层面决定资源的规格&lt;/li&gt;
  &lt;li&gt;通过监控发现性能效率异常以及时采取行动，循环检视确保在云化过程中活得了收益&lt;/li&gt;
  &lt;li&gt;根据业务场景需求，适当权衡取舍，比如压缩或缓存、降低一致性要求优化性能&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;成本优化&quot;&gt;成本优化&lt;/h3&gt;

&lt;h4 id=&quot;定义-4&quot;&gt;定义&lt;/h4&gt;
&lt;p&gt;成本优化侧重于避免不必要的成本。关键主题包括：了解和控制资金的使用、选择最合适的资源类型和数量、分析一段时间内的支出以及扩展以满足业务需求而不超支。&lt;/p&gt;

&lt;h4 id=&quot;白皮书-4&quot;&gt;白皮书&lt;/h4&gt;
&lt;p&gt;https://d1.awsstatic-china.com/whitepapers/architecture/AWS-Cost-Optimization-Pillar.pdf&lt;/p&gt;

&lt;h4 id=&quot;设计原则-4&quot;&gt;设计原则&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;确定一个消费模型&lt;/li&gt;
  &lt;li&gt;度量整体的效率&lt;/li&gt;
  &lt;li&gt;停止在数据中心操作上支出&lt;/li&gt;
  &lt;li&gt;分析分类支出&lt;/li&gt;
  &lt;li&gt;相对于完全拥有服务的所有权，使用代理管理的服务以减少支出&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;最佳实践-4&quot;&gt;最佳实践&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;成本也是需要权衡的，比如需要快速上线，过点、交付市场，提供新特性，把成本先放一放也不是不可以&lt;/li&gt;
  &lt;li&gt;违背了经验数据进行设计决策，总是想着以防万一，可能会导致极大的资源浪费增加不必要的开销&lt;/li&gt;
  &lt;li&gt;选择合适规格的资源实例是成本控制的钥匙，比如一个业务程序在小规格实例上需要跑5个小时，而在大规格的实例上只需要跑1个小时，哪一种才是最高效的？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;AWS Well-Architected Framework提供了架构完善的五大支柱以及最佳实践，帮助我们基于AWS设计和操作可靠、安全、性能成本高效的系统，从而有更多的精力投入其他方面的工作，例如业务功能需求。&lt;/p&gt;

&lt;h2 id=&quot;心得感想&quot;&gt;心得感想&lt;/h2&gt;
&lt;p&gt;卓越操作与可靠性，卓越操作其实是为了降低运维过程中犯错的可能，或缩短因犯错导致系统不可用的时长，从运维层面保障了系统的可靠性。AWS架构完善五大支柱中的卓越操作与可靠性相关的设计原则和最佳实践与Google的SRE中的许多思想（如监控系统、变更管理、制定服务质量目标等）是一致的。&lt;/p&gt;

&lt;p&gt;安全性，作为一名开发人员，曾经被测试提出不少安全问题，类别五花八门：有横向纵向越权问题、存储/打印用户敏感信息、文件目录权限过大、系统使用弱密码、使用root权限启动业务进程，引入带有漏洞或存在法务风险的第三方软件等。系统的安全性是重中之重，在实际工作中，我们通过安全设计、安全编码以及安全测试保障系统的安全性达到要求、符合地方法规。&lt;/p&gt;

&lt;h2 id=&quot;参考链接&quot;&gt;参考链接&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://amazonaws-china.com/cn/blogs/apn/the-5-pillars-of-the-aws-well-architected-framework/&lt;/li&gt;
  &lt;li&gt;https://amazonaws-china.com/cn/architecture/well-architected/&lt;/li&gt;
  &lt;li&gt;https://soundcloud.com/amazon-web-services-306355661/202-the-aws-well-architected-framework&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">关键词：AWS, Architects, Well-Architected Framework</summary></entry><entry><title type="html">调用链与分布式追踪系统</title><link href="http://172.17.0.2:8000/blog/jekyll/sre/tracking/2019/01/20/distributed-tracking-system.html" rel="alternate" type="text/html" title="调用链与分布式追踪系统" /><published>2019-01-20T16:40:07+00:00</published><updated>2019-01-20T16:40:07+00:00</updated><id>http://172.17.0.2:8000/blog/jekyll/sre/tracking/2019/01/20/distributed-tracking-system</id><content type="html" xml:base="http://172.17.0.2:8000/blog/jekyll/sre/tracking/2019/01/20/distributed-tracking-system.html">&lt;p&gt;关键词：SRE，调用链，分布式追踪系统&lt;/p&gt;

&lt;p&gt;上周的工作内容是开发一个运维需求——对接公有云的分布式追踪系统。服务上线转商用之前，运维能力需要满足商用要求，而使用分布式追踪系统把服务监控起来，是商用运维要求中的必须项，因此有了这个需求。一周下来，代码已经开发得差不多了，还差验证和上线工作，在这之前，先梳理回顾一下。&lt;/p&gt;

&lt;p&gt;对接到分布式追踪系统之所以如此重要，是因为使用分布式追踪系统监控服务有以下好处&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;通过在各个微服务埋点打印的调用链日志，能够把一个请求处理的完整链路端到端地展示出来&lt;/li&gt;
  &lt;li&gt;能够快速定位到异常环节，如中间在某个环节响应慢或是处理失败&lt;/li&gt;
  &lt;li&gt;能够根据调用链日志生成服务依赖关系拓扑图，直观地观察到故障点或哪个微服务是系统的瓶颈点所在&lt;/li&gt;
  &lt;li&gt;甚至能够根据采集的日志进行告警配置&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们的服务主要使用Python和Go语言进行开发，分别获取对应的SDK进行开发即可，整个开发对接上线的流程大致是这样的：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;联系接口人沟通埋点方案&lt;/li&gt;
  &lt;li&gt;使用统一的SDK进行埋点代码开发和测试&lt;/li&gt;
  &lt;li&gt;整理服务—微服务—节点—日志路径信息，服务—微服务—业务—URL信息。公司的分布式追踪系统的日志采集借用了已有的日志服务的能力，日志服务接收到调用链日志时，会直接转发给分布式追踪系统，因此信息需要分别反馈给日志采集系统和分布式追踪系统在服务节点上安装日志采集Agent&lt;/li&gt;
  &lt;li&gt;升级微服务，打开打印调用链日志的开关（开始打印调用链日志，与此同时，节点上的日志采集Agent把采集的调用链日志信息上报到日志系统）&lt;/li&gt;
  &lt;li&gt;类生产环境验证对接效果：本地正常打印调用链日志，日志采集Agent正常上报调用链日志；分布式追踪系统能够检索到服务的Trace信息，能够正常显示微服务依赖关系拓扑图&lt;/li&gt;
  &lt;li&gt;上线生产环境各个局点&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;埋点开发&quot;&gt;埋点开发&lt;/h3&gt;

&lt;h4 id=&quot;哪些地方需要打印调用链日志呢&quot;&gt;哪些地方需要打印调用链日志呢？&lt;/h4&gt;
&lt;p&gt;和性能调优类似，打点的地方可以包括：HTTP请求服务/客户端、RPC请求服务/客户端、数据库访问、中间件调用、本地方法调用。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;What points should be tracked by default?
I think that for all projects we should include by default 5 kinds of points:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;All HTTP calls - helps to get information about: what HTTP requests were done, duration of calls (latency of service), information about projects involved in request.&lt;/li&gt;
    &lt;li&gt;All RPC calls - helps to understand duration of parts of request related to different services in one project. This information is essential to understand which service produce the bottleneck.&lt;/li&gt;
    &lt;li&gt;All DB API calls - in some cases slow DB query can produce bottleneck. So it’s quite useful to track how much time request spend in DB layer.&lt;/li&gt;
    &lt;li&gt;All driver calls - in case of nova, cinder and others we have vendor drivers. Duration&lt;/li&gt;
    &lt;li&gt;ALL SQL requests (turned off by default, because it produce a lot of traffic)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;埋点方式&quot;&gt;埋点方式&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;显示调用start和stop方法&lt;/li&gt;
  &lt;li&gt;函数/类装饰器&lt;/li&gt;
  &lt;li&gt;with代码块&lt;/li&gt;
  &lt;li&gt;某些框架或依赖库有官方的集成支持，JAVA和Go的支持非常全，而Python的则缺少一些中间件（https://github.com/opentracing-contrib）&lt;/li&gt;
  &lt;li&gt;听说Go还有一种直接替换Go-SDK就能够完成埋点功能注入的方式…&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;两篇重要的论文&quot;&gt;两篇重要的论文&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;《Dapper, a Large-Scale Distributed Systems Tracing Infrastructure》—— 让分布式追踪系统这个领域流行起来&lt;/li&gt;
  &lt;li&gt;《Uncertainty in Aggregate Estimates from Sampled Distributed Traces》—— 关于采样的详细分析&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;标准&quot;&gt;标准&lt;/h3&gt;
&lt;p&gt;Uber发起的OpenTracing现在已经成为云原生计算基金会的一个子项目，&lt;a href=&quot;https://github.com/opentracing/specification/blob/master/specification.md&quot;&gt;OpenTracing Semantic Specification&lt;/a&gt;定义了数据采集时的数据模型和一些接口，应该算是分布式追踪系统的接口标准了，比较出名的Jaeger和Zipkin都实现了OpenTracing API。&lt;/p&gt;

&lt;h3 id=&quot;业界实践&quot;&gt;业界实践&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;阿里淘宝：EagleEye&lt;/li&gt;
  &lt;li&gt;Twitter：Zipkin&lt;/li&gt;
  &lt;li&gt;Uber：Jaeger&lt;/li&gt;
  &lt;li&gt;AWS：XRays&lt;/li&gt;
  &lt;li&gt;Google：Dapper，StakeDriver Trace，OpenCensus&lt;/li&gt;
  &lt;li&gt;Golang：AppDash&lt;/li&gt;
  &lt;li&gt;蚂蚁：云图&lt;/li&gt;
  &lt;li&gt;阿里云：谛听，盘古&lt;/li&gt;
  &lt;li&gt;神马：STrace&lt;/li&gt;
  &lt;li&gt;OpenStack：osprofiler（原本是用于采集方法调用耗时数据，上报到ceilometer监控计量计费系统，用于性能调优，经过定制修改日志打印格式兼容OpenTracing的话打印出来的就是调用链日志了）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;参考链接&quot;&gt;参考链接&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/yunqiinsight/article/details/80134045&quot;&gt;https://blog.csdn.net/yunqiinsight/article/details/80134045&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://yq.aliyun.com/articles/514488&quot;&gt;https://yq.aliyun.com/articles/514488&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/sting2me/p/4393018.html&quot;&gt;https://www.cnblogs.com/sting2me/p/4393018.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.appoptics.com/intro-to-opentracing-and-opencensus-for-distributed-tracing/&quot;&gt;https://blog.appoptics.com/intro-to-opentracing-and-opencensus-for-distributed-tracing/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://logz.io/blog/zipkin-vs-jaeger/&quot;&gt;https://logz.io/blog/zipkin-vs-jaeger/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://opentracing.io/&quot;&gt;https://opentracing.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">关键词：SRE，调用链，分布式追踪系统</summary></entry><entry><title type="html">类生产环境UI自动化测试失败用例处理</title><link href="http://172.17.0.2:8000/blog/jekyll/sre/testing/2019/01/06/handle-UI-testcase-fails-of-preproduction-environment.html" rel="alternate" type="text/html" title="类生产环境UI自动化测试失败用例处理" /><published>2019-01-06T02:00:07+00:00</published><updated>2019-01-06T02:00:07+00:00</updated><id>http://172.17.0.2:8000/blog/jekyll/sre/testing/2019/01/06/handle-UI-testcase-fails-of-preproduction-environment</id><content type="html" xml:base="http://172.17.0.2:8000/blog/jekyll/sre/testing/2019/01/06/handle-UI-testcase-fails-of-preproduction-environment.html">&lt;p&gt;关键词：SRE，自动化测试，API设计&lt;/p&gt;

&lt;p&gt;这周六服务有许多UI自动化测试用例跑失败了，直接原因是后台依赖的一个外部服务概率性需要一两分钟才返回，响应非常慢，导致后台响应前台慢，前台等待后台响应超时，于是测试用例就执行失败了。&lt;/p&gt;

&lt;p&gt;发现外部依赖服务响应慢时，一方面需要联系相应的on-call来处理，另外一方面，还需要意识到自己的服务本身也存在可靠性问题——外部服务不总是可靠的，我们的服务需要有一定的容错机制。在响应很慢的情况下，不能一直等待对方响应，应该配置合理的超时时间，而且一次调用超时，可能只要重试一两次对方就能成功快速响应请求了。&lt;/p&gt;

&lt;p&gt;最终的解决方案&lt;/p&gt;

&lt;p&gt;后端访问外部服务时考虑业务健壮性，启动一个协程去调用外部服务，同时增加调用外部服务时的超时时间和重试次数配置，从而提高服务本身的可靠性。
完善监控指标和告警配置，添加从该后端组件到外部依赖服务之间的连通性指标。如果在一定长度的时间窗内，采集的连通性指标连续几次值为异常，就触发相应的告警&lt;/p&gt;</content><author><name></name></author><summary type="html">关键词：SRE，自动化测试，API设计</summary></entry><entry><title type="html">Initial my blog site in github page with Jekyll</title><link href="http://172.17.0.2:8000/blog/jekyll/update/github/2018/12/03/initial-my-blog-site-in-Github-page.html" rel="alternate" type="text/html" title="Initial my blog site in github page with Jekyll" /><published>2018-12-03T02:00:07+00:00</published><updated>2018-12-03T02:00:07+00:00</updated><id>http://172.17.0.2:8000/blog/jekyll/update/github/2018/12/03/initial-my-blog-site-in-Github-page</id><content type="html" xml:base="http://172.17.0.2:8000/blog/jekyll/update/github/2018/12/03/initial-my-blog-site-in-Github-page.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://172.17.0.2:8000/blog/jekyll/update/2018/12/02/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-12-02T13:51:07+00:00</published><updated>2018-12-02T13:51:07+00:00</updated><id>http://172.17.0.2:8000/blog/jekyll/update/2018/12/02/welcome-to-jekyll</id><content type="html" xml:base="http://172.17.0.2:8000/blog/jekyll/update/2018/12/02/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>